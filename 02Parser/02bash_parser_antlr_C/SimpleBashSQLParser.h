/** \file
 *  This C header file was generated by $ANTLR version 3.5.2
 *
 *     -  From the grammar source file : SimpleBashSQL.g
 *     -                            On : 2016-01-02 17:13:15
 *     -                for the parser : SimpleBashSQLParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
SimpleBashSQLParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pSimpleBashSQLParser, which is returned from a call to SimpleBashSQLParserNew().
 *
 * The methods in pSimpleBashSQLParser are  as follows:
 *
 *  - 
 void
      pSimpleBashSQLParser->file(pSimpleBashSQLParser)
 *  - 
 void
      pSimpleBashSQLParser->newline(pSimpleBashSQLParser)
 *  - 
 SimpleBashSQLParser_comment_return
      pSimpleBashSQLParser->comment(pSimpleBashSQLParser)
 *  - 
 void
      pSimpleBashSQLParser->simple_list(pSimpleBashSQLParser)
 *  - 
 void
      pSimpleBashSQLParser->pipeline_cmd(pSimpleBashSQLParser)
 *  - 
 SimpleBashSQLParser_command_return
      pSimpleBashSQLParser->command(pSimpleBashSQLParser)
 *  - 
 void
      pSimpleBashSQLParser->subshell(pSimpleBashSQLParser)
 *  - 
 void
      pSimpleBashSQLParser->compound_list(pSimpleBashSQLParser)
 *  - 
 void
      pSimpleBashSQLParser->redirection(pSimpleBashSQLParser)
 *  - 
 void
      pSimpleBashSQLParser->to_redir(pSimpleBashSQLParser)
 *  - 
 char*
      pSimpleBashSQLParser->from_redir(pSimpleBashSQLParser)
 *  - 
 void
      pSimpleBashSQLParser->other_redir(pSimpleBashSQLParser)
 *  - 
 void
      pSimpleBashSQLParser->shell_cmd(pSimpleBashSQLParser)
 *  - 
 void
      pSimpleBashSQLParser->for_command(pSimpleBashSQLParser)
 *  - 
 SimpleBashSQLParser_for_header_return
      pSimpleBashSQLParser->for_header(pSimpleBashSQLParser)
 *  - 
 void
      pSimpleBashSQLParser->if_command(pSimpleBashSQLParser)
 *  - 
 void
      pSimpleBashSQLParser->group_command(pSimpleBashSQLParser)
 *  - 
 void
      pSimpleBashSQLParser->function_def(pSimpleBashSQLParser)
 *  - 
 void
      pSimpleBashSQLParser->case_command(pSimpleBashSQLParser)
 *  - 
 void
      pSimpleBashSQLParser->case_clause(pSimpleBashSQLParser)
 *  - 
 query *
      pSimpleBashSQLParser->cmd(pSimpleBashSQLParser)
 *  - 
 void
      pSimpleBashSQLParser->words(pSimpleBashSQLParser)
 *  - 
 void
      pSimpleBashSQLParser->assignment(pSimpleBashSQLParser)
 *  - 
 void
      pSimpleBashSQLParser->word(pSimpleBashSQLParser)
 *  - 
 void
      pSimpleBashSQLParser->awkbody(pSimpleBashSQLParser)
 *  - 
 SimpleBashSQLParser_pattern_return
      pSimpleBashSQLParser->pattern(pSimpleBashSQLParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_SimpleBashSQLParser_H
#define _SimpleBashSQLParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct SimpleBashSQLParser_Ctx_struct SimpleBashSQLParser, * pSimpleBashSQLParser;



#ifndef MYHEAD
#define MYHEAD
 
 #include <assert.h>
 #include "SimpleBashSQLLexer.h"
 #define MAXFIELDS 5
 #define DELIMIT ','

 typedef struct myquery{
	char select[10], from[30],
	where[200], groupby[5],
	orderby[5], as[20];
	/*numerische Repraesentation der Felder*/
	char felder[MAXFIELDS], groups[MAXFIELDS], orders[MAXFIELDS];
	/*sprechende Namen */
	char *fname[MAXFIELDS];
	/* findet join statt? felder 1, felder2, tabelle1, tabelle2 */
	char join, f1,f2,t2[20];
	/* findet union statt?  */
	char sqlunion,sort,group,nrfields;
	struct myquery *src, *src2;
  } query;


#endif


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct SimpleBashSQLParser_comment_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
}
    SimpleBashSQLParser_comment_return;



typedef struct SimpleBashSQLParser_command_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
}
    SimpleBashSQLParser_command_return;



typedef struct SimpleBashSQLParser_for_header_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
}
    SimpleBashSQLParser_for_header_return;



typedef struct SimpleBashSQLParser_pattern_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
}
    SimpleBashSQLParser_pattern_return;




/** Context tracking structure for 
SimpleBashSQLParser

 */
struct SimpleBashSQLParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     void
     (*file)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     void
     (*newline)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     SimpleBashSQLParser_comment_return
     (*comment)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     void
     (*simple_list)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     void
     (*pipeline_cmd)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     SimpleBashSQLParser_command_return
     (*command)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     void
     (*subshell)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     void
     (*compound_list)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     void
     (*redirection)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     void
     (*to_redir)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     char*
     (*from_redir)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     void
     (*other_redir)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     void
     (*shell_cmd)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     void
     (*for_command)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     SimpleBashSQLParser_for_header_return
     (*for_header)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     void
     (*if_command)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     void
     (*group_command)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     void
     (*function_def)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     void
     (*case_command)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     void
     (*case_clause)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     query *
     (*cmd)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     void
     (*words)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     void
     (*assignment)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     void
     (*word)	(struct SimpleBashSQLParser_Ctx_struct * ctx);

     void
     (*awkbody)	(struct SimpleBashSQLParser_Ctx_struct * ctx, query* r);

     SimpleBashSQLParser_pattern_return
     (*pattern)	(struct SimpleBashSQLParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct SimpleBashSQLParser_Ctx_struct * ctx);
    void	    (*free)   (struct SimpleBashSQLParser_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pSimpleBashSQLParser SimpleBashSQLParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pSimpleBashSQLParser SimpleBashSQLParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__13      13
#define T__14      14
#define T__15      15
#define T__16      16
#define T__17      17
#define T__18      18
#define T__19      19
#define T__20      20
#define T__21      21
#define T__22      22
#define T__23      23
#define T__24      24
#define T__25      25
#define T__26      26
#define T__27      27
#define T__28      28
#define T__29      29
#define T__30      30
#define T__31      31
#define T__32      32
#define T__33      33
#define T__34      34
#define T__35      35
#define T__36      36
#define T__37      37
#define T__38      38
#define T__39      39
#define T__40      40
#define T__41      41
#define T__42      42
#define T__43      43
#define T__44      44
#define T__45      45
#define T__46      46
#define T__47      47
#define T__48      48
#define T__49      49
#define T__50      50
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__59      59
#define T__60      60
#define T__61      61
#define T__62      62
#define T__63      63
#define T__64      64
#define T__65      65
#define T__66      66
#define ALCHAR      4
#define DIGIT      5
#define LETTER      6
#define NUMBER      7
#define OPTS      8
#define PIPE      9
#define SONDER      10
#define WHITESPACE      11
#define WORD      12
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for SimpleBashSQLParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
